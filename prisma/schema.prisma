generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "mysql"
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ------------------------------------------------------------------------------------------------
// Enums
// ------------------------------------------------------------------------------------------------

// enum AltitudeChange {
//   CLIMBING
//   DESCENDING
//   LEVEL
//   UNKNOWN
// }

// enum UpdateType {
//   PROJECTED
//   OCEANIC
//   RADAR
//   ADSB
//   MULTILATERATION
//   DATALINK
//   ADSB_ASDEX
//   SPACE
//   UNKNOWN
// }

// enum CategoryClass {
//   ASEL // Airplane Single-Engine Land
//   AMEL // Airplane Multi-Engine Land
//   ASES // Airplane Single-Engine Sea
//   AMES // Airplane Multi-Engine Sea
//   RH // Rotocraft Helicopter
//   RG // Rotocraft Gyroplane
//   GL // Glider
//   LA // Lighter Than Air Airship
//   LB // Lighter Than Air Balloon
//   PLIFT // Powered Lift
//   PL // Powered Parachute Land
//   PS // Powered Parachute Land
//   WL // Weight Shift Control Land
//   WS // Weight Shift Control Sea
// }

// enum GearType {
//   AM // Amphibian
//   FC // Fixed Tailwheel
//   FT // Fixed Tricycle
//   FL // Floats
//   RC // Retractable Tailwheel
//   RT // Retractable Tricycle
//   SK // Skids
//   SI // Skis
// }

// enum EngineType {
//   DS // Diesel
//   EL // Electric
//   NP // Non-Powered
//   PT // Piston
//   RA // Radial
//   TF // Turbofan
//   TJ // Turbojet
//   TP // Turboprop
//   TS // Turboshaft
// }

// enum SimType {
//   FFS
//   FTD
//   ATD
// }

// ------------------------------------------------------------------------------------------------
// Primary Datatypes
// ------------------------------------------------------------------------------------------------

model Tour {
  id      Int       @id @default(autoincrement())
  days    DutyDay[]
  options Option[]

  startTime_utc       Int
  startTimezone       String
  startTimezoneOffset Int

  endTime_utc       Int?
  endTimezone       String?
  endTimezoneOffset Int?

  startAirportId String // @db.VarChar(5)
  endAirportId   String? // @db.VarChar(5)
  startAirport   Airport  @relation("startAirport", fields: [startAirportId], references: [id], onDelete: Restrict)
  endAirport     Airport? @relation("endAirport", fields: [endAirportId], references: [id], onDelete: Restrict)

  companyId String
  lineCheck Boolean

  notes String @default("") // @db.VarChar(1024)

  @@map("tours")
}

model DutyDay {
  id Int @id @default(autoincrement())

  tourId Int
  tour   Tour @relation(fields: [tourId], references: [id], onDelete: Restrict)

  legs      Leg[]
  deadheads Deadhead[]

  startTime_utc       Int
  startTimezone       String
  startTimezoneOffset Int

  endTime_utc       Int
  endTimezone       String
  endTimezoneOffset Int

  startAirportId String // @db.VarChar(5)
  endAirportId   String // @db.VarChar(5)
  startAirport   Airport @relation("startAirport", fields: [startAirportId], references: [id], onDelete: Restrict)
  endAirport     Airport @relation("endAirport", fields: [endAirportId], references: [id], onDelete: Restrict)

  notes String @default("") // @db.VarChar(1024)

  @@map("days")
}

model Option {
  id String @id @default(uuid())

  tourId Int?
  tour   Tour? @relation(fields: [tourId], references: [id], onDelete: Cascade)

  inaccurateTiming  Boolean
  ident             String // @db.VarChar(16)
  faFlightId        String
  operator          String? // @db.VarChar(16)
  flightNumber      String? // @db.VarChar(16)
  registration      String? // @db.VarChar(16)
  inboundFaFlightId String?

  blocked      Boolean
  diverted     Boolean
  cancelled    Boolean
  positionOnly Boolean

  originAirportId      String? // @db.VarChar(5)
  destinationAirportId String? // @db.VarChar(5)
  diversionAirportId   String? // @db.VarChar(5)

  departureDelay      Int?
  arrivalDelay        Int?
  filedEte            Int?
  progressPercent     Int?
  status              String
  aircraftType        String? // @db.VarChar(32)
  routeDistance       Int?
  filedAirspeed       Int?
  filedAltitude       Int?
  filedRoute          String?
  seatsCabinBusiness  Int?
  seatsCabinCoach     Int?
  seatsCabinFirst     Int?
  gateOrigin          String? // @db.VarChar(16)
  gateDestination     String? // @db.VarChar(16)
  terminalOrigin      String? // @db.VarChar(16)
  terminalDestination String? // @db.VarChar(16)
  type                String

  scheduledOut Int?
  scheduledOff Int?
  actualOut    Int?
  actualOff    Int?
  scheduledIn  Int?
  scheduledOn  Int?
  actualIn     Int?
  actualOn     Int?

  startTime Int
  endTime   Int

  @@unique([faFlightId])
  @@map("options")
}

model FlightAwareData {
  faFlightId String @id

  operator          String? // @db.VarChar(16)
  flightNumber      String? // @db.VarChar(16)
  registration      String? // @db.VarChar(16)
  inboundFaFlightId String?

  blocked      Boolean
  diverted     Boolean
  cancelled    Boolean
  positionOnly Boolean

  sourceLink String

  departureDelay      Int?
  arrivalDelay        Int?
  filedEte            Int?
  progressPercent     Int?
  status              String // @db.VarChar(64)
  aircraftType        String? // @db.VarChar(32)
  routeDistance       Int?
  filedAirspeed       Int?
  filedAltitude       Int?
  filedRoute          String?
  seatsCabinBusiness  Int?
  seatsCabinCoach     Int?
  seatsCabinFirst     Int?
  gateOrigin          String? // @db.VarChar(16)
  gateDestination     String? // @db.VarChar(16)
  terminalOrigin      String? // @db.VarChar(16)
  terminalDestination String? // @db.VarChar(16)
  type                String

  scheduledOut Int?
  scheduledOff Int?
  actualOut    Int?
  actualOff    Int?
  scheduledIn  Int?
  scheduledOn  Int?
  actualIn     Int?
  actualOn     Int?

  legId String @unique
  leg   Leg    @relation(fields: [legId], references: [id], onDelete: Cascade)

  @@map("flightAwareData")
}

model Leg {
  id         String     @id @default(uuid())
  dayId      Int?
  day        DutyDay?   @relation(fields: [dayId], references: [id], onDelete: Restrict)
  positions  Position[]
  fixes      Fix[]
  approaches Approach[]

  route    String?
  useBlock Boolean

  flightAwareData FlightAwareData?

  ident String? // @db.VarChar(16)

  originAirportId      String? // @db.VarChar(5)
  destinationAirportId String? // @db.VarChar(5)
  diversionAirportId   String? // @db.VarChar(5)
  originAirport        Airport? @relation("originAirport", fields: [originAirportId], references: [id], onDelete: Restrict)
  destinationAirport   Airport? @relation("destinationAirport", fields: [destinationAirportId], references: [id], onDelete: Restrict)
  diversionAirport     Airport? @relation("diversionAirport", fields: [diversionAirportId], references: [id], onDelete: Restrict)

  startTime_utc Int
  endTime_utc   Int

  relativeOrder Int @default(0)

  totalTime Float @default(0)
  pic       Float @default(0)
  sic       Float @default(0)
  night     Float @default(0)
  solo      Float @default(0)
  xc        Float @default(0)
  distance  Float @default(0)

  dayTakeOffs   Int @default(0)
  dayLandings   Int @default(0)
  nightTakeOffs Int @default(0)
  nightLandings Int @default(0)

  simulatedInstrument Float @default(0)
  actualInstrument    Float @default(0)
  holds               Int   @default(0)

  dualGiven    Float @default(0)
  dualReceived Float @default(0)

  flightReview    Boolean @default(false)
  checkride       Boolean @default(false)
  ipc             Boolean @default(false)
  faa6158         Boolean @default(false)

  passengers Int @default(0)

  notes String @default("") // @db.VarChar(1024)

  aircraft   Aircraft @relation(fields: [aircraftId], references: [id], onDelete: Restrict)
  aircraftId String

  images LegImage[]

  @@map("legs")
}

model Export {
  id String @id
  dataSourceVersion Int
  params String
  file String
  
  generated_utc Int

  @@unique([dataSourceVersion, params])

  @@map("exports")
}

model LegImage {
  id    String @id
  image Image  @relation(fields: [id], references: [id])
  legId String
  leg   Leg    @relation(fields: [legId], references: [id])
}

model Deadhead {
  id    String   @id @default(uuid())
  dayId Int?
  day   DutyDay? @relation(fields: [dayId], references: [id], onDelete: Cascade)

  originAirportId      String // @db.VarChar(5)
  destinationAirportId String // @db.VarChar(5)
  originAirport        Airport @relation("deadheadStart", fields: [originAirportId], references: [id], onDelete: Restrict)
  destinationAirport   Airport @relation("deadheadEnd", fields: [destinationAirportId], references: [id], onDelete: Restrict)

  startTime_utc Int
  endTime_utc   Int

  @@map("deadheads")
}

model Settings {
  setting String @id
  value   String

  @@map("settings")
}

// ------------------------------------------------------------------------------------------------
// Supporting Datatypes
// ------------------------------------------------------------------------------------------------

model AircraftType {
  id String @id

  typeCode           String
  subCode            String?
  make               String
  model              String
  catClass           String // @db.VarChar(5) // ENUM: CategoryClass
  gear               String // @db.VarChar(2) // ENUM: GearType
  engine             String // @db.VarChar(2) // ENUM: EngineType
  complex            Boolean
  taa                Boolean
  highPerformance    Boolean
  pressurized        Boolean
  typeRatingRequired Boolean @default(false)

  image   Image?  @relation(fields: [imageId], references: [id], onDelete: Restrict)
  imageId String? @unique

  aircraft Aircraft[]

  @@unique([typeCode, subCode])
  @@map("aircraft-types")
}

model Aircraft {
  id           String @id
  registration String @unique

  aircraftTypeId String
  type           AircraftType @relation(fields: [aircraftTypeId], references: [id], onDelete: Restrict)
  year           Int?
  serial         String?

  simulator       Boolean  @default(false)
  simulatorType   String? // @db.VarChar(3) // ENUM: SimType
  complex         Boolean?
  taa             Boolean?
  highPerformance Boolean?
  pressurized     Boolean?

  notes   String?
  image   Image?  @relation(fields: [imageId], references: [id], onDelete: Restrict)
  imageId String? @unique
  legs    Leg[]

  @@map("aircraft")
}

model Image {
  id        String @unique
  original  String
  fullJpeg  String
  fullAvif  String
  i2048Jpeg String
  i2048Avif String
  i1024Jpeg String
  i1024Avif String
  i768Jpeg  String
  i768Avif  String
  i512Jpeg  String
  i512Avif  String
  i256Jpeg  Bytes
  i256Avif  Bytes
  i128Jpeg  Bytes
  i128Avif  Bytes

  aircraft     Aircraft?
  aircraftType AircraftType?
  leg          LegImage?

  @@map("images")
}

model Airport {
  id          String  @id
  timezone    String
  name        String
  city        String
  infoURL     String?
  latitude    Float
  longitude   Float
  countryCode String

  legOrigin      Leg[] @relation("originAirport")
  legDestination Leg[] @relation("destinationAirport")
  legDiversion   Leg[] @relation("diversionAirport")

  tourStart Tour[] @relation("startAirport")
  tourEnd   Tour[] @relation("endAirport")

  dayStart DutyDay[] @relation("startAirport")
  dayEnd   DutyDay[] @relation("endAirport")

  deadheadStart Deadhead[] @relation("deadheadStart")
  deadheadEnd   Deadhead[] @relation("deadheadEnd")
  Approach      Approach[]

  @@unique([latitude, longitude])
  @@map("airports")
}

model Approach {
  id           String  @id @default(uuid())
  type         String
  runway       String?
  tag          String?
  composite    String
  circleToLand Boolean
  notes        String?

  Leg       Leg?    @relation(fields: [legId], references: [id])
  legId     String?
  airport   Airport @relation(fields: [airportId], references: [id])
  airportId String

  @@map("approaches")
}

model ApproachOptions {
  id        Int     @id @default(autoincrement())
  airportId String
  type      String
  runway    String?
  tag       String?
  composite String
  custom    Boolean @default(false)

  @@map("approachesOptions")
}

model AircraftRegistrationLookup {
  reg             String @id
  manufactureYear Int
  serial          String

  @@map("aircraftRegistrationLookup")
}

model NavDataNav {
  index               Int                          @id @default(autoincrement())
  id                  String
  name                String?
  type                String
  latitude            Float
  longitude           Float
  NavDataAirway       NavDataAirway[]
  // NavDataSID      NavDataSIDSTAR[] @relation("SIDBody")
  // NavDataSIDFixes NavDataSIDSTAR[]
  NavDataSIDSTARRoute NavDataSIDSTARRouteSegment[] @relation("SIDSTARRoute")

  @@map("navDataNav")
}

model NavDataAirway {
  index        Int          @id @default(autoincrement())
  id           String
  airwayString String
  region       String // (C) Contential, (H) Hawaii, (A) Alaska
  fixes        NavDataNav[]

  @@map("navDataAirway")
}

model NavDataSIDSTARRouteSegment {
  id                         String          @id @default(uuid())
  identifier                 String? // XXXXX
  airport                    String? // XXX
  runway                     String? // ##X
  type                       String // BODY or TRANSITION
  name                       String
  fixes                      NavDataNav[]    @relation("SIDSTARRoute")
  fixesOrder                 String // 123, 456, 555, 890
  navDataSIDSTARRWLead       NavDataSIDSTAR? @relation("SIDSTARRWLeads", fields: [navDataSIDSTARRWLeadId], references: [id])
  navDataSIDSTARRWLeadId     String?
  navDataSIDSTARTransition   NavDataSIDSTAR? @relation("SIDSTARTransitions", fields: [navDataSIDSTARTransitionId], references: [id])
  navDataSIDSTARTransitionId String?

  @@map("navDataSIDSTARRouteSegment")
}

model NavDataSIDSTAR {
  id       String @id
  revision Int

  runwayLeads NavDataSIDSTARRouteSegment[] @relation("SIDSTARRWLeads")
  transitions NavDataSIDSTARRouteSegment[] @relation("SIDSTARTransitions")

  airportsServiced String
  type             String

  @@map("navDataSIDSTAR")
}

model Position {
  legId          String
  altitude       Int
  altitudeChange String // @db.VarChar(10) //ENUM: AltitudeChange
  groundspeed    Int
  heading        Int
  latitude       Float
  longitude      Float
  timestamp      Int
  updateType     String? // @db.VarChar(15) //ENUM: UpdateType?

  leg Leg @relation(fields: [legId], references: [id], onDelete: Cascade)

  @@unique([legId, timestamp, latitude, longitude])
  @@map("positions")
}

model Fix {
  id                    Int    @id @default(autoincrement())
  legId                 String
  name                  String
  latitude              Float?
  longitude             Float?
  distanceFromOrigin    Float?
  distanceThisLeg       Float?
  distanceToDestination Float?
  outboundCourse        Int?
  type                  String

  leg Leg @relation(fields: [legId], references: [id], onDelete: Cascade)

  @@map("fixes")
}
